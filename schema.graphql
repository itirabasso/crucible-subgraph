
type CrucibleEntity @entity {
    id: ID!
    owner: Bytes!            
    timestamp: BigInt!
    blockNumber: BigInt!
    index: BigInt

    locks: [Lock!]  @derivedFrom(field: "crucible")

    level: CrucibleLevel

    txhash: Bytes!
}

type Lock @entity {
    # id = crucibleId-lockID
    id: ID!
    delegate: Bytes!
    token: Bytes!
    balance: BigInt!

    stakesLength: BigInt!
    stakes: [Stake!]! @derivedFrom(field: "lock")

    unstakesLength: BigInt!
    unstakes: [Unstake!]! @derivedFrom(field: "lock")

    crucible: CrucibleEntity!
}

type Stake @entity {
    id: ID!
    amount: BigInt!
    timestamp: BigInt!
    lock: Lock!
}

type Unstake @entity {
    id: ID!
    amount: BigInt!
    duration: BigInt!
    timestamp: BigInt!
    lock: Lock!
}

type Counters @entity {
    id: ID!
    count: BigInt!
}


type Reward @entity {
    # crucibleId-token
    id: ID!
    token: Bytes!
    aludel: Bytes!

    amount: BigInt!

    lastUpdate: BigInt!

    crucible: CrucibleEntity!
}

type Leaderboard @entity {
    id: ID!
    points: BigInt!
}

enum CrucibleLevel {
    Basic
    Pro
    Platinum
    Unknown
}