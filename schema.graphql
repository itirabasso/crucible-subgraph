
type CrucibleEntity @entity {
    id: ID!
    owner: Bytes!            
    timestamp: BigInt!
    blockNumber: BigInt!
    index: BigInt

    locks: [Lock!]  @derivedFrom(field: "crucible")

    rewardsLength: BigInt!
    rewards: [Reward!] @derivedFrom(field: "crucible")

    txhash: Bytes!

    factory: Bytes!
}

type Lock @entity {
    # id = crucibleId-lockID
    id: ID!
    delegate: Bytes!
    token: ERC20Token!
    balance: BigInt!

    stakesLength: BigInt!
    stakes: [Stake!]! @derivedFrom(field: "lock")

    unstakesLength: BigInt!
    unstakes: [Unstake!]! @derivedFrom(field: "lock")

    crucible: CrucibleEntity!
}

type Stake @entity {
    id: ID!
    amount: BigInt!
    timestamp: BigInt!
    lock: Lock!
}

type Unstake @entity {
    id: ID!
    amount: BigInt!
    duration: BigInt!
    timestamp: BigInt!
    lock: Lock!
}

type Counters @entity {
    id: ID!
    count: BigInt!
}

type RewardProgram @entity {
    # contract address
    id: ID!
    
    owner: Bytes

    template: Bytes
    name: String
    startTime: BigInt
    stakingTokenUrl: String

    rewards: [Reward!]! @derivedFrom(field: "rewardProgram")

    vaultFactories: [ProgramVaultFactory!]! @derivedFrom(field: "rewardProgram")
}

type VaultFactory @entity {
    # vault address
    id: ID!

    rewardPrograms: [ProgramVaultFactory!]! @derivedFrom(field: "vaultFactory")
}

type ProgramVaultFactory @entity {
    # factory-program
    id: ID!

    vaultFactory: VaultFactory!
    rewardProgram: RewardProgram!
}

type Template @entity {
    # contract address
    id: ID!
    disabled: Boolean
    name: String
}

type Reward @entity {
    # crucibleId-token
    id: ID!
    token: ERC20Token!

    aludel: Bytes!
    rewardProgram: RewardProgram!

    amount: BigInt!

    lastUpdate: BigInt!

    crucible: CrucibleEntity!
}

type Leaderboard @entity {
    id: ID!
    points: BigInt!
}

type ERC20Token @entity {
    id: ID!

    address: Bytes!
    symbol: String!
    name: String!
    decimals: BigInt!
}

type Config @entity {
    id: ID!
}
